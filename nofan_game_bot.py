import telebot
import os
from dotenv import load_dotenv
from telebot import types
import random
import time

load_dotenv()
bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_games = {}

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å"))
    markup.add(types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), types.KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    
    bot.send_message(
        message.chat.id, 
        f"üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ NoFan Game Bot!\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        f"–Ø –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç —Å –∫—Ä—É—Ç—ã–º–∏ –º–∏–Ω–∏-–∏–≥—Ä–∞–º–∏.\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=markup
    )

@bot.message_handler(commands=['game'])
def start_game(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üéØ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞", callback_data="quick_game"))
    markup.add(types.InlineKeyboardButton("üé≤ –ò–≥—Ä–∞ –Ω–∞ —É–¥–∞—á—É", callback_data="luck_game"))
    markup.add(types.InlineKeyboardButton("‚ö° –¢–µ—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏", callback_data="reaction_test"))
    markup.add(types.InlineKeyboardButton("üèÜ –õ–∏–¥–µ—Ä–±–æ—Ä–¥", callback_data="leaderboard"))
    
    bot.send_message(
        message.chat.id,
        "üéØ NoFan Game - –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É!\n\n"
        "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n"
        "‚Ä¢ üéØ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ - —Å–ª—É—á–∞–π–Ω—ã–µ –æ—á–∫–∏\n"
        "‚Ä¢ üé≤ –ò–≥—Ä–∞ –Ω–∞ —É–¥–∞—á—É - —É–≥–∞–¥–∞–π —á–∏—Å–ª–æ\n"
        "‚Ä¢ ‚ö° –¢–µ—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏ - –∫–ª–∏–∫–∞–π –±—ã—Å—Ç—Ä–æ\n\n"
        "–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å?",
        reply_markup=markup
    )

@bot.message_handler(commands=['help'])
def help_message(message):
    help_text = """
üéÆ NoFan Game Bot - –ü–æ–º–æ—â—å

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/game - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:
‚Ä¢ üéØ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ - –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—ã–µ –æ—á–∫–∏
‚Ä¢ üé≤ –ò–≥—Ä–∞ –Ω–∞ —É–¥–∞—á—É - —É–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10
‚Ä¢ ‚ö° –¢–µ—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏ - –Ω–∞–∂–∏–º–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ò–≥—Ä–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –≤–µ—Å–µ–ª—å—è
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    """
    bot.send_message(message.chat.id, help_text)

@bot.message_handler(commands=['stats'])
def show_stats(message):
    user_id = message.from_user.id
    if user_id in user_games:
        games_played = len(user_games[user_id])
        total_score = sum(user_games[user_id])
        best_score = max(user_games[user_id]) if user_games[user_id] else 0
        avg_score = total_score // games_played if games_played > 0 else 0
    else:
        games_played = 0
        total_score = 0
        best_score = 0
        avg_score = 0
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {message.from_user.first_name}

üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score} –æ—á–∫–æ–≤
üéØ –í—Å–µ–≥–æ –∏–≥—Ä: {games_played}
‚ö° –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {avg_score} –æ—á–∫–æ–≤
üéÆ –û–±—â–∏–π —Å—á–µ—Ç: {total_score} –æ—á–∫–æ–≤

{"–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞! üåü" if games_played > 10 else "–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä–∞—Ç—å, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"}
    """
    bot.send_message(message.chat.id, stats_text)

@bot.message_handler(func=lambda message: message.text == "üéÆ –ò–≥—Ä–∞—Ç—å")
def play_button(message):
    start_game(message)

@bot.message_handler(func=lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def stats_button(message):
    show_stats(message)

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def help_button(message):
    help_message(message)

@bot.callback_query_handler(func=lambda call: call.data == "quick_game")
def quick_game(call):
    user_id = call.from_user.id
    score = random.randint(50, 300)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if user_id not in user_games:
        user_games[user_id] = []
    user_games[user_id].append(score)
    
    bot.answer_callback_query(call.id, "üéâ –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="quick_game"))
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"))
    
    bot.send_message(
        call.message.chat.id,
        f"üéâ –ë—ã—Å—Ç—Ä–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üèÜ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –æ—á–∫–æ–≤\n"
        f"‚ö° {'–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' if score > 200 else '–•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' if score > 150 else '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!'}",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "luck_game")
def luck_game(call):
    bot.answer_callback_query(call.id)
    
    markup = types.InlineKeyboardMarkup()
    for i in range(1, 11):
        markup.add(types.InlineKeyboardButton(f"{i}", callback_data=f"guess_{i}"))
    
    bot.send_message(
        call.message.chat.id,
        "üé≤ –ò–≥—Ä–∞ –Ω–∞ —É–¥–∞—á—É!\n\n"
        "üéØ –£–≥–∞–¥–∞–π—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10\n"
        "üèÜ –£–≥–∞–¥–∞–ª–∏ = 100 –æ—á–∫–æ–≤\n"
        "‚ö° –ù–µ —É–≥–∞–¥–∞–ª–∏ = 10 –æ—á–∫–æ–≤ –∑–∞ –ø–æ–ø—ã—Ç–∫—É\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("guess_"))
def handle_guess(call):
    user_id = call.from_user.id
    user_guess = int(call.data.split("_")[1])
    winning_number = random.randint(1, 10)
    
    if user_guess == winning_number:
        score = 100
        result_text = f"üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!\n\nüéØ –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {winning_number}!\nüèÜ –ü–æ–ª—É—á–µ–Ω–æ: {score} –æ—á–∫–æ–≤"
    else:
        score = 10
        result_text = f"üòî –ù–µ —É–≥–∞–¥–∞–ª–∏!\n\nüéØ –ë—ã–ª–æ —á–∏—Å–ª–æ: {winning_number}\nüé≤ –í–∞—à–µ —á–∏—Å–ª–æ: {user_guess}\nüèÜ –ü–æ–ª—É—á–µ–Ω–æ: {score} –æ—á–∫–æ–≤ –∑–∞ –ø–æ–ø—ã—Ç–∫—É"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if user_id not in user_games:
        user_games[user_id] = []
    user_games[user_id].append(score)
    
    bot.answer_callback_query(call.id, "üé≤ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤!")
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="luck_game"))
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"))
    
    bot.send_message(call.message.chat.id, result_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "reaction_test")
def reaction_test(call):
    bot.answer_callback_query(call.id)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üöÄ –°–¢–ê–†–¢", callback_data="start_reaction"))
    
    bot.send_message(
        call.message.chat.id,
        "‚ö° –¢–µ—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏!\n\n"
        "üéØ –ü—Ä–∞–≤–∏–ª–∞:\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –°–¢–ê–†–¢\n"
        "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∏ –ö–õ–ò–ö\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!\n"
        "‚Ä¢ –ß–µ–º –±—ã—Å—Ç—Ä–µ–µ - —Ç–µ–º –±–æ–ª—å—à–µ –æ—á–∫–æ–≤\n\n"
        "–ì–æ—Ç–æ–≤—ã?",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "start_reaction")
def start_reaction_test(call):
    bot.answer_callback_query(call.id, "‚è≥ –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å...")
    
    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 2 –¥–æ 5 —Å–µ–∫—É–Ω–¥
    delay = random.randint(2, 5)
    
    bot.send_message(
        call.message.chat.id,
        f"‚è≥ –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å...\n\n"
        f"üéØ –ö–Ω–æ–ø–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥\n"
        f"‚ö° –ë—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –Ω–∞–∂–∞—Ç—å –±—ã—Å—Ç—Ä–æ!"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    start_time = time.time() + delay
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥
    time.sleep(delay)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üî• –ö–õ–ò–ö!", callback_data=f"reaction_click_{start_time}"))
    
    bot.send_message(
        call.message.chat.id,
        "üî• –°–ï–ô–ß–ê–°! –ù–ê–ñ–ò–ú–ê–ô–¢–ï!",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("reaction_click_"))
def handle_reaction_click(call):
    user_id = call.from_user.id
    start_time = float(call.data.split("_")[2])
    reaction_time = time.time() - start_time
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏
    if reaction_time < 0.5:
        score = 200
        rating = "üèÜ –ú–û–õ–ù–ò–ï–ù–û–°–ù–û!"
    elif reaction_time < 1.0:
        score = 150
        rating = "‚ö° –û–¢–õ–ò–ß–ù–û!"
    elif reaction_time < 1.5:
        score = 100
        rating = "üëç –•–û–†–û–®–û!"
    elif reaction_time < 2.0:
        score = 50
        rating = "üòê –ù–û–†–ú–ê–õ–¨–ù–û"
    else:
        score = 25
        rating = "üêå –ú–ï–î–õ–ï–ù–ù–û"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if user_id not in user_games:
        user_games[user_id] = []
    user_games[user_id].append(score)
    
    bot.answer_callback_query(call.id, f"{rating}")
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîÑ –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="reaction_test"))
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"))
    
    bot.send_message(
        call.message.chat.id,
        f"‚ö° –¢–µ—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–µ–∞–∫—Ü–∏–∏: {reaction_time:.2f} —Å–µ–∫\n"
        f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: {score} –æ—á–∫–æ–≤\n"
        f"üéØ –û—Ü–µ–Ω–∫–∞: {rating}",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "show_stats")
def show_stats_callback(call):
    user_id = call.from_user.id
    if user_id in user_games:
        games_played = len(user_games[user_id])
        total_score = sum(user_games[user_id])
        best_score = max(user_games[user_id]) if user_games[user_id] else 0
        avg_score = total_score // games_played if games_played > 0 else 0
    else:
        games_played = 0
        total_score = 0
        best_score = 0
        avg_score = 0
    
    bot.answer_callback_query(call.id)
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {call.from_user.first_name}

üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_score} –æ—á–∫–æ–≤
üéØ –í—Å–µ–≥–æ –∏–≥—Ä: {games_played}
‚ö° –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {avg_score} –æ—á–∫–æ–≤
üéÆ –û–±—â–∏–π —Å—á–µ—Ç: {total_score} –æ—á–∫–æ–≤

{"–û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞! üåü" if games_played > 10 else "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å!"}
    """
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å –µ—â–µ", callback_data="back_to_games"))
    
    bot.send_message(call.message.chat.id, stats_text, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_games")
def back_to_games(call):
    bot.answer_callback_query(call.id)
    start_game(call.message)

@bot.callback_query_handler(func=lambda call: call.data == "leaderboard")
def show_leaderboard(call):
    # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    leaderboard_text = """
üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤ NoFan Game

1. üëë –ò–≥—Ä–æ–∫1 - 1500 –æ—á–∫–æ–≤
2. ü•à –ò–≥—Ä–æ–∫2 - 1200 –æ—á–∫–æ–≤  
3. ü•â –ò–≥—Ä–æ–∫3 - 1000 –æ—á–∫–æ–≤
4. üèÖ –ò–≥—Ä–æ–∫4 - 800 –æ—á–∫–æ–≤
5. üèÖ –ò–≥—Ä–æ–∫5 - 600 –æ—á–∫–æ–≤

–ò–≥—Ä–∞–π—Ç–µ –±–æ–ª—å—à–µ, —á—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —Ç–æ–ø!
    """
    bot.answer_callback_query(call.id)
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="back_to_games"))
    
    bot.send_message(call.message.chat.id, leaderboard_text, reply_markup=markup)

@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∏–≥—Ä—ã (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    import json
    try:
        data = json.loads(message.web_app_data.data)
        score = data.get('score', 0)
        
        bot.send_message(
            message.chat.id,
            f"üéâ –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞!\n\n"
            f"üèÜ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –æ—á–∫–æ–≤\n"
            f"‚ö° –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä–∞—Ç—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!"
        )
    except:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä—ã")

if __name__ == "__main__":
    print("üöÄ NoFan Game Bot –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
